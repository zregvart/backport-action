#!/bin/bash
set -x
set -e
set -o pipefail

backport() {
  local number=$1
  local branch=$2
  local git_user_email=$3
  local git_user_name=$4
  local token=$5

  echo "::debug::Backporting pull request #${number} to branch ${branch}"
  echo "::debug::environment\n$(env)"

  local repository=$(jq --raw-output .repository.clone_url "$GITHUB_EVENT_PATH")
  local backport_branch="backport/${number}-to-${branch}"
  local merge_sha=$(jq --raw-output .pull_request.merge_commit_sha "$GITHUB_EVENT_PATH")

  git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
  git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"

  git clone --no-tags -b ${branch} ${repository} "${GITHUB_WORKSPACE}"
  (cd "${GITHUB_WORKSPACE}";
  git checkout -b ${backport_branch};
  git cherry-pick --mainline 1 ${merge_sha};
  auth=$(echo ${GITHUB_ACTOR}:${token}|base64);
  echo "::debug::auth=$(echo ${auth}|base64)"
  GIT_CURL_VERBOSE=2 git -c "http.extraheader=Authorization: Basic ${auth/$'\n'/}" push --set-upstream origin ${backport_branch})

  local title=$(jq --raw-output .pull_request.title "$GITHUB_EVENT_PATH")
  local pull_request_title="[Backport ${branch}] ${title}"
  local pull_request_body="Backport of #${number}"
  local pull_request="{\
    \"title\": \"${pull_request_title}\", \
    \"body\": \"${pull_request_body}\", \
    \"head\": \"${backport_branch}\", \
    \"base\": \"${branch}\" \
  }"

  local pulls=$(tmp=$(jq --raw-output .repository.pulls_url "$GITHUB_EVENT_PATH"); echo "${tmp%{*}")

  curl -XPOST -fsSL \
    -H 'Accept: application/vnd.github.v3+json' \
    -H "Authorization: Bearer ${token}" \
    -H "Content-Type: application/json" \
    -d "${pull_request}" \
    ${pulls}
}

main() {
  local git_user_email=$1
  local git_user_name=$2
  local token=$3

  local number=$(jq --raw-output .number "$GITHUB_EVENT_PATH")
  local merged=$(jq --raw-output .pull_request.merged "$GITHUB_EVENT_PATH")
  local labels=$(jq --raw-output .pull_request.labels[].name "$GITHUB_EVENT_PATH")

  if [[ "$merged" != "true" ]]; then
    exit 0
  fi

  IFS=$'\n'
  for label in ${labels}; do
    if [[ "${label}" == 'backport '* ]]; then
      local branch=${label#* }
      backport ${number} ${branch} "${git_user_email}" "${git_user_name}" "${token}"
    fi
  done

}

main "$@"
